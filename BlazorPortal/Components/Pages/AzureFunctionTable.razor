@using Azure.ResourceManager
@using BlazorPortal.Models
@using FunctionApp.Logic

@inject Functions Functions
@inject ArmClient AzureClient

@attribute [StreamRendering]

@if (functions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Actions</th>
                <th>Name</th>
                <th>Status</th>
                <th>Trigger</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var function in functions)
            {
                <AzureFunctionTableRow Item=function></AzureFunctionTableRow>
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public string FunctionAppId { get; set; } = "";

    private AzureFunction[]? functions;

    protected override Task OnInitializedAsync()
    {
        functions = null;
        return Task.CompletedTask;
    }

    public async Task RefreshMeAsync(string functionAppId)
    {
        FunctionAppId = functionAppId;
        if (string.IsNullOrWhiteSpace(functionAppId))
        {
            functions = null;
        }
        else 
        {
            functions = await Functions.GetListOfAllAsync(AzureClient, FunctionAppId).Select(a => new AzureFunction
                (
                    Id: a.Id,
                    FunctionAppId: functionAppId,
                    Name: a.Name,
                    Status: a.Status,
                    Trigger: GetTriggerDescription(a.Trigger)
                )
            ).ToArrayAsync();
        }

        StateHasChanged();
    }

    private string GetTriggerDescription(string trigger)
    {
        try
        {
            return CronExpressionDescriptor.ExpressionDescriptor.GetDescription(trigger);
        }
        catch(Exception)
        {
            return trigger;  // We do not understand the trigger description so we just return it to an user as it is.
        }
    }
}
