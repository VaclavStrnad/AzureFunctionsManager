@page "/function-app/{SelectedFunctionAppId}"
@rendermode InteractiveServer
@inject FunctionApps FunctionApps
@inject ArmClient AzureClient
@inject ToastService ToastService

@using Azure.Identity
@using Azure.ResourceManager
@using BlazorPortal.Models
@using FunctionApp.Logic
@using BlazorBootstrap

<div>
    <a href="function-apps"><Icon Name="IconName.ArrowLeft"></Icon> Back</a>&nbsp;&nbsp;&nbsp;&nbsp; <label>Function App</label>
    <select @onchange="OptionChanged" value=@functionAppId>
        @foreach (var option in phoneTypeOptions)
        {
            <option value="@option.Value" selected="@option.Selected">@option.Text</option>
        }
    </select>
    &nbsp;&nbsp;&nbsp;&nbsp;
    <span style="margin-left=50px">
Status: @functionAppStatus
&nbsp;
    @if (functionAppStatus != "Running")
    {
<button class="btn btn-light" @onclick="StartFunc" title="Start Function App"><Icon Name="IconName.Play"></Icon></button>
            }
@if (functionAppStatus != "Stopped")
            {
<button class="btn btn-light" @onclick="StopFunc" title="Stop Function App"><Icon Name="IconName.Stop"></Icon></button>
            }
    </span>
</div>


<AzureFunctionTable @ref=azureFunctionTable FunctionAppId=@functionAppId ></AzureFunctionTable>

<Toasts class="p-3" AutoHide="true" StackLength="10" Placement="ToastsPlacement.TopRight" Delay="6000" ShowCloseButton="true" />

@code {
    [Parameter] public string? SelectedFunctionAppId { get; set; }
    string functionAppId = "";
    string functionAppStatus = "Loading...";
    protected AzureFunctionTable? azureFunctionTable;


    List<SelectListItem> phoneTypeOptions { get; set; } = [new SelectListItem("", "Loading ....")];

    public record SelectListItem(string Value, string Text)
    {
        public bool Selected;
    }


    protected override async Task OnInitializedAsync()
    {

        this.phoneTypeOptions = (await FunctionApps.GetListOfAllAsync(AzureClient).ToListAsync())
            .Select(a => new SelectListItem(a.Id!, a.Name))
            .ToList();

        if (!phoneTypeOptions.Any())
        {
            phoneTypeOptions = [new SelectListItem("", "No function app found.")];
            this.functionAppId = "";
        }
        else
        {
            this.functionAppId = phoneTypeOptions.First().Value;
        }

        {
            var selected = phoneTypeOptions.FirstOrDefault(a => a.Text == SelectedFunctionAppId);
            if(selected != null)
            {
                selected.Selected = true;
                this.functionAppId = selected.Value;
            }
        }

        await (azureFunctionTable?.RefreshMeAsync(functionAppId) ?? Task.CompletedTask);
        await TryRefreshStatus();
    }

    private async Task OptionChanged(ChangeEventArgs e)
    {
        string selectedValue = e.Value?.ToString() ?? "";
        functionAppId = selectedValue;

        await (azureFunctionTable?.RefreshMeAsync(functionAppId) ?? Task.CompletedTask);
        await TryRefreshStatus();
    }

    private async Task StartFunc(MouseEventArgs e)
    {
        try
        {
            var result = await FunctionApps.StartAsync(AzureClient, this.functionAppId);
            if (!result.IsError)
            {
                ToastService.Notify(new(ToastType.Success, $"Service successfully started."));
            }
            else
            {
                ToastService.Notify(new(ToastType.Danger, $"Unable to start service: {result.ReasonPhrase}"));
            }
        }
        catch(Exception ex)
        {
            ToastService.Notify(new(ToastType.Danger, $"Unable to start service: {ex.ToString()}"));
        }

        await TryRefreshStatus();
    }

    private async Task StopFunc(MouseEventArgs e)
    {
        try
        {
            var result = await FunctionApps.StopAsync(AzureClient, this.functionAppId);
            if (!result.IsError)
            {
                ToastService.Notify(new(ToastType.Success, $"Service successfully stopped."));
            }
            else
            {
                ToastService.Notify(new(ToastType.Danger, $"Unable to stop service: {result.ReasonPhrase}"));
            }
        }
        catch (Exception ex)
        {
            ToastService.Notify(new(ToastType.Danger, $"Unable to stop service: {ex.ToString()}"));
        }

        await TryRefreshStatus();
    }


    private async Task RefreshStatus(MouseEventArgs e)
    {
        await TryRefreshStatus(true);
    }

    private async Task<bool> TryRefreshStatus(bool setErrorMessage = false)
    {
        try
        {
            if (String.IsNullOrWhiteSpace(functionAppId))
            {
                functionAppStatus = "na";
                return true;
            }

            var result = await FunctionApps.GetStatusAsync(AzureClient, this.functionAppId);
            this.functionAppStatus = result;
            return true;
        }
        catch (Exception ex)
        {
            if (setErrorMessage)
            {
                ToastService.Notify(new(ToastType.Danger, $"Unable to refresh status: {ex.ToString()}"));
            }
            functionAppStatus = "na";
            return false;
        }
    }


    
}
