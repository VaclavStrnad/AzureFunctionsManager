@using Azure.ResourceManager
@using BlazorPortal.Models
@using FunctionApp.Logic
@using BlazorBootstrap

@inject Functions Functions
@inject ArmClient AzureClient


<tr>
    <td>
        <button class="btn btn-outline-primary" @onclick="EnableFunc">Enable</button>
        <button class="btn btn-outline-primary" @onclick="DisableFunc">Disable</button>
        <button class="btn btn-outline-primary" @onclick="RunFunc">Run</button>
        <button class="btn btn-outline-primary" @onclick="LogFunc">Log</button>
    </td>
    <td>@(Item?.Name ?? "na")</td>
    <td>@(Item?.Status ?? "na")</td>
    <td>@(Item?.Trigger ?? "na")</td>
</tr>
@if(Message != null){
    <tr>
        <td colspan="4">
            <Callout HideHeading="true">
            <p>@Message</p>
            </Callout>
        </td>
        <td>
            <button class="btn btn-outline-primary" @onclick="HideMessageFunc" title="Hide Messahe"><Icon Name="IconName.X"></Icon></button>
        </td>
    </tr>
}
@if (ShowLog)
{
    <tr>
        <td colspan="3">
            <Callout Color="CalloutColor.Success" HideHeading="true">
                <p>
            <LogRender Item=@Item></LogRender>
                </p>
            </Callout>
        </td>
        <td>
            <button class="btn btn-outline-primary" @onclick="CloseLogFunc" title="Close Log"><Icon Name="IconName.X"></Icon></button>
        </td>
    </tr>
}

@code {
    [Parameter] public AzureFunction? Item { get; set; }
    [Parameter] public bool ShowLog { get; set; } = false;
    [Parameter] public string? Message { get; set; } = null;


    private async Task RunFunc(MouseEventArgs e)
    {
        if (Item == null) return;

        try
        {
            var result = await Functions.RunFunction(AzureClient, Item.FunctionAppId, Item.Id);

            if (result.IsSuccessStatusCode)
                Message = "Function successfully triggered (" + DateTime.Now + ").";
            else
                Message = "Unable to run the function - an error occured: " + result.StatusCode + " - " + (await result.Content.ReadAsStringAsync());
        }
        catch (Exception ex)
        {
            Message = ex.ToString();
        }
    }

    private async Task EnableFunc(MouseEventArgs e)
    {
        if (Item == null) return;

        try
        {
            var result = await Functions.EnableAsync(AzureClient, Item.FunctionAppId, Item.Id);
            Message = result.Match<string?>(status => { this.Item = this.Item with { Status = status.Status }; return null; }, ex => ex.ToString());
        }
            catch (Exception ex)
            {
                Message = ex.ToString();
            }
        }

        private async Task DisableFunc(MouseEventArgs e)
        {
            if (Item == null) return;

            try
            {
                var result = await Functions.DisableAsync(AzureClient, Item.FunctionAppId, Item.Id);
                if (result.IsSuccess)
                {
                Message = result.Match<string?>(status => { this.Item = this.Item with { Status = status.Status }; return null; }, ex => ex.ToString());
                }
            else
            {
                Message = result.ToString();
            }
        }
        catch (Exception ex)
        {
            Message = ex.ToString();
        }
    }

    private void LogFunc(MouseEventArgs e)
    {
        ShowLog = true;
    }

    private void CloseLogFunc(MouseEventArgs e)
    {
        ShowLog = false;
    }

    private void HideMessageFunc(MouseEventArgs e)
    {
        Message = null;
    }
}
